table_comp$mod<- rep(c("gjam","gjam1","gjam2","gjam3","gjam4"), 4*4)
table_comp$num<- rep(1:16, each=5)
table_comp$rv<- rep(c(5,10,15,20), each=5, 4)
burn<-2000
it<- 5000
nsamples<-500
for(i in (1: nrow(table_comp))){
j<-table_comp$num[i]
table_comp$Schar[i]<- paste0("S=",table_comp$S[i])
if((table_comp$mod[i]=="gjam")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtGJ)[j]))>0)){ table_comp$res[i]<- mean(LtGJ[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam1")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT1)[j]))>0)){ table_comp$res[i]<-  mean(LtT1[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam2")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT2)[j]))>0)){ table_comp$res[i]<- mean(LtT2[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam3")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT3)[j]))>0)){ table_comp$res[i]<-  mean(LtT3[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam4")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT4)[j]))>0)){ table_comp$res[i]<- mean(LtT4[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam")&(length(grep(paste0("r_",table_comp$rv[i]),names(Ltgj0)[j]))>0)){
table_comp$lweight[i]<- apply(Ltgj0[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(Ltgj0[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- Ltgj0[[j]]$fit
table_comp$err[i]<- Ltgj0[[j]]$err
}
if((table_comp$mod[i]=="gjam1")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT1)[j]))>0)){
table_comp$lweight[i]<-  apply(LtT1[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT1[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT1[[j]]$fit
table_comp$err[i]<- LtT1[[j]]$err
}
if((table_comp$mod[i]=="gjam2")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT2)[j]))>0)){
table_comp$lweight[i]<- apply(LtT2[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT2[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT2[[j]]$fit
table_comp$err[i]<- LtT2[[j]]$err
}
if((table_comp$mod[i]=="gjam3")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT3)[j]))>0)){
table_comp$lweight[i]<-  apply(LtT3[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT3[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT3[[j]]$fit
table_comp$err[i]<- LtT3[[j]]$err
}
if((table_comp$mod[i]=="gjam4")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT4)[j]))>0)){
table_comp$lweight[i]<- apply(LtT4[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT4[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT4[[j]]$fit
table_comp$err[i]<- LtT4[[j]]$err
}
}
table_comp$Schar <- factor(table_comp$Schar, levels=c('S=20','S=50','S=80','S=100'))
table_comp<-table_comp[,-1]
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= res, colour = mod) + geom_point(size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,10))+
labs(title="Ability to recover true number of groups for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+
geom_hline(yintercept = 4,color = "red")+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= lweight, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,0.3))+
labs(title="Last p_k weight value for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= fit_err, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,max(table_comp$err)))+
labs(title="Fit error value for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),                                                                                                                                                                    strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= err, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,max(table_comp$err)))+
labs(title="RMSE error between estimated and true covariance matrix for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),                                                                                                                                                                    strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
table_comp$Schar <- factor(table_comp$Schar, levels=c('S=20','S=50','S=80','S=100'))
table_comp<-table_comp[,-1]
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= res, colour = mod) + geom_point(size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,10))+
labs(title="Ability to recover true number of groups for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+
geom_hline(yintercept = 8,color = "red")+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
library(pracma)
library(Brobdingnag)
library(copula)
#####Prior distribution on the number of groups.
kval<-10
theta<-1
sigma<-0.5
############### V for PY########################
v_py<- function(kval, sigma,theta,npoints){
c_v<-1:(kval-1)
v_nk<- (theta +sigma*c_v)
Vup<- prod(v_nk)
n_vec<- 1:(npoints-1)
Vlow<- prod(theta +n_vec)
V_t_nk<-Vup/Vlow
return(V_t_nk)
}
###############Generalized coefficient########################
gen_fac_coef<-function(kval,sigma,npoints){
sum<-0
kfac<-factorial(kval)
for(i in (0:kval)){
n_vec<- 0:(npoints-1)
sn<- prod(-i*sigma +n_vec)
ckn<- choose(kval,i)
sum<- sum + ((-1)^i)*ckn*sn
}
sumf<- sum/kfac
return(sumf)
}
############### V for NGG########################
v_ng<- function(beta, sigma, kval, npoints){
sum<-0
coef_low<-gamma(npoints)
coef_high<-exp(beta)* sigma^(kval-1)
coef<- coef_high/coef_low
for(i in (0:(npoints-1))){
gn<- gammainc(kval - i/sigma,beta)[2]
#gn<- gamma_inc(kval - i/sigma,beta)
ckn<- choose(npoints-1,i)
sum<- sum + ((-1)^i)*(beta^(i/sigma))*ckn*gn
}
sumf<- sum/coef
return(sumf)
}
########### density for  NGG #############################
prob_ng<- function(kg, npoints, sigma, beta){
pb_v<- v_ng(beta, sigma, kg, npoints)
pb_gen<- gen_fac_coef(kg,sigma, npoints)
prob<- (pb_v*pb_gen)/(sigma^kg)
return(prob)
}
########### density for PY#############################
prob_py<- function(kg, npoints, sigma, theta){
pb_v<- v_py(kg,sigma, theta,npoints)
pb_gen<- gen_fac_coef(kg,sigma, npoints)
prob<- (pb_v*pb_gen)/(sigma^kg)
return(prob)
}
########### density for Dirichlet#############################
prob_dir<- function(k, npoints, theta){
n_vec<- 0:(npoints-1)
theta_n<- prod(theta +n_vec)
prob<- ((theta^k) *(abs(Stirling1(npoints,k))))/theta_n
return(prob)
}
prob_dir_large_dim<- function(k, npoints, theta){
n_vec<-as.brob( 0:(npoints-1))
theta_n<- prod(theta +n_vec)
stir<- as.brob(abs(Stirling1(npoints,k)))
powerk<- as.brob((theta^k))
prob_brob<- powerk*(stir/theta_n)
prob<- as.numeric(prob_brob)
return(prob)
}
n_vec<-as.brob( 0:(npoints-1))
theta_n<- prod(theta +n_vec)
stir<- as.brob(abs(Stirling1(npoints,k)))
powerk<- as.brob((theta^k))
prob_brob<- powerk*(stir/theta_n)
prob<- as.numeric(prob_brob)
####################################################################################################################
#############################Plotting###############################################################################
k_vec<-seq(1,50,by=49/9)
sigma_vec<-seq(0.2,0.8, by=0.6/9)
z<- outer(k_vec,sigma_vec,Vectorize(prob_py),npoints=50, theta=1)
p<- plot_ly(showscale = TRUE) %>%
add_surface(x=k_vec, y=sigma_vec,z =z, cmin = min(z), cmax = max(z),colorbar=list(title='PY'), colorscale = list(c(0,1),c("rgb(255,112,184)","rgb(128,0,64)")),opacity = 0.98) %>%
layout(title="Prior distribution", scene = list(xaxis= list(title="K"),yaxis= list(title="sigma"),zaxis= list(title="N",range = c(min(z),max(z)))))
p
#
# k_vec<- seq(1,50, by =1)
# y<- c()
# for(l in (1: length(k_vec))){
#   y<- c(y, prob_py(k_vec[l],npoints=50,theta=1,sigma=0.15))
# }
#
# plot(k_vec, y)
# k_vec<-seq(1,50,by=49/9)
# sigma_vec<-seq(0.2,0.8, by=0.6/9)
# z<- outer(k_vec,sigma_vec,Vectorize(prob_py),npoints=50, theta=1)
#
#######################################PY##################################
sigma_df <- rep(seq(0.2,0.8, by=0.6/9), each=50)
k_df<- rep(1:50, 10)
df<- as.data.frame(matrix(NA, nrow=500, ncol=1))
df$k<- k_df
df$sigma<- sigma_df
for(l in (1: nrow(df))){
df$val[l]<- prob_py(df$k[l],npoints=50,theta=1,sigma=df$sigma[l])
}
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title="K"),yaxis= list(title="sigma"), zaxis= list(title="Probability")))
p
#####################################################################################################################
sigma_df <- rep(seq(0.2,0.8, by=0.6/9), each=50)
k_df<- rep(1:50, 10)
df<- as.data.frame(matrix(NA, nrow=500, ncol=1))
df$k<- k_df
df$sigma<- sigma_df
for(l in (1: nrow(df))){
df$val[l]<- prob_py(df$k[l],npoints=50,theta=1,sigma=df$sigma[l])
}
df$sigma<- as.factor(df$sigma)
p<- plot_ly(df, x =df$k , y = df$sigma, z = df$val, split = df$sigma, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density", scene = list(xaxis= list(title="K"),yaxis= list(title="sigma"), zaxis= list(title="Probability")))
p
##########Dirichlet
#prob_dir<- function(k, npoints, theta)
theta_df <- rep(seq(1,150, by=149/9), each=150)
k_df<- rep(1:150, 10)
df<- as.data.frame(matrix(NA, nrow=1500, ncol=1))
df$k<- k_df
df$theta<- theta_df
for(l in (1: nrow(df))){
df$val[l]<- prob_dir_large_dim(df$k[l],npoints=150,theta=df$theta[l])
}
df$theta<- as.factor(df$theta)
p150<- plot_ly(df, x =df$k , y = df$theta, z = df$val, split = df$theta, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density for Dirichlet prior for n=50", scene = list(xaxis= list(title="K"),yaxis= list(title="alpha"), zaxis= list(title="Probability")))
p150
prob_dir(10,npoints=150,theta=60)
#####################################################################
theta_df <- rep(seq(1,150, by=149/9), each=150)
k_df<- rep(1:150, 10)
df<- as.data.frame(matrix(NA, nrow=1500, ncol=1))
df$k<- k_df
df$theta<- theta_df
for(l in (1: nrow(df))){
df$val[l]<- prob_dir_large_dim(df$k[l],npoints=150,theta=df$theta[l])
}
df$theta<- as.factor(df$theta)
p150<- plot_ly(df, x =df$k , y = df$theta, z = df$val, split = df$theta, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density for Dirichlet prior for n=50", scene = list(xaxis= list(title="K"),yaxis= list(title="alpha"), zaxis= list(title="Probability")))
p150
#theta_df <- rep(seq(1,150, by=149/9), each=150)
#############Varying N####################
k_df<- rep(1:50,  by=49/9)
npoint_df <- rep(seq(50,140, by=10), each=50)
df<- as.data.frame(matrix(NA, nrow=500, ncol=1))
df$k<- k_df
df$np<- npoint_df
for(l in (1: nrow(df))){
df$val[l]<- prob_dir_large_dim(df$k[l],npoints=df$np[l],theta=df$np[l]/2)
}
df$np<- as.factor(df$np)
p150<- plot_ly(df, x =df$k , y = df$np, z = df$val, split = df$np, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density for Dirichlet prior theta=20, varying n in (50-140) ", scene = list(xaxis= list(title="K"),yaxis= list(title="number of points"), zaxis= list(title="Probability")))
p150
#theta_df <- rep(seq(1,150, by=149/9), each=150)
k_df<- rep(1:50,  by=49/9)
npoint_df <- rep(seq(50,140, by=10), each=50)
df<- as.data.frame(matrix(NA, nrow=500, ncol=1))
df$k<- k_df
df$np<- npoint_df
for(l in (1: nrow(df))){
df$val[l]<- prob_dir_large_dim(df$k[l],npoints=df$np[l],theta=20)
}
df$np<- as.factor(df$np)
p150<- plot_ly(df, x =df$k , y = df$np, z = df$val, split = df$np, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density for Dirichlet prior theta=20, varying n in (50-140) ", scene = list(xaxis= list(title="K"),yaxis= list(title="number of points"), zaxis= list(title="Probability")))
p150
table_comp$Schar <- factor(table_comp$Schar, levels=c('S=20','S=50','S=80','S=100'))
table_comp<-table_comp[,-1]
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= res, colour = mod) + geom_point(size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,10))+
labs(title="Ability to recover true number of groups for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+
geom_hline(yintercept = 8,color = "red")+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
LtGJ <- load_object("ODSim_smallSK8_gjam.Rda")
Ltgj0<- load_object( "ODSim_smallSK8_gjam0.Rda")
LtT1<-load_object("ODSim_smallSK8_type1.Rda")
LtT2<-load_object("ODSim_smallSK8_type2.Rda")
LtT3<-load_object("ODSim_smallSK8_type3.Rda")
LtT4<-load_object("ODSim_smallSK8_type4.Rda")
S_vec<-c(20,50,80,100)
r_vec<-c(5,10,15,20)
table_comp<-as.data.frame(matrix(NA, nrow=length(r_vec)*length(S_vec)*5, ncol=1))
table_comp$S<- rep(S_vec, each=4*5)
table_comp$mod<- rep(c("gjam","gjam1","gjam2","gjam3","gjam4"), 4*4)
table_comp$num<- rep(1:16, each=5)
table_comp$rv<- rep(c(5,10,15,20), each=5, 4)
burn<-2000
it<- 5000
nsamples<-500
for(i in (1: nrow(table_comp))){
j<-table_comp$num[i]
table_comp$Schar[i]<- paste0("S=",table_comp$S[i])
if((table_comp$mod[i]=="gjam")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtGJ)[j]))>0)){ table_comp$res[i]<- mean(LtGJ[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam1")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT1)[j]))>0)){ table_comp$res[i]<-  mean(LtT1[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam2")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT2)[j]))>0)){ table_comp$res[i]<- mean(LtT2[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam3")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT3)[j]))>0)){ table_comp$res[i]<-  mean(LtT3[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam4")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT4)[j]))>0)){ table_comp$res[i]<- mean(LtT4[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam")&(length(grep(paste0("r_",table_comp$rv[i]),names(Ltgj0)[j]))>0)){
table_comp$lweight[i]<- apply(Ltgj0[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(Ltgj0[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- Ltgj0[[j]]$fit
table_comp$err[i]<- Ltgj0[[j]]$err
}
if((table_comp$mod[i]=="gjam1")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT1)[j]))>0)){
table_comp$lweight[i]<-  apply(LtT1[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT1[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT1[[j]]$fit
table_comp$err[i]<- LtT1[[j]]$err
}
if((table_comp$mod[i]=="gjam2")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT2)[j]))>0)){
table_comp$lweight[i]<- apply(LtT2[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT2[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT2[[j]]$fit
table_comp$err[i]<- LtT2[[j]]$err
}
if((table_comp$mod[i]=="gjam3")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT3)[j]))>0)){
table_comp$lweight[i]<-  apply(LtT3[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT3[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT3[[j]]$fit
table_comp$err[i]<- LtT3[[j]]$err
}
if((table_comp$mod[i]=="gjam4")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT4)[j]))>0)){
table_comp$lweight[i]<- apply(LtT4[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT4[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT4[[j]]$fit
table_comp$err[i]<- LtT4[[j]]$err
}
}
table_comp$Schar <- factor(table_comp$Schar, levels=c('S=20','S=50','S=80','S=100'))
table_comp<-table_comp[,-1]
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= res, colour = mod) + geom_point(size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,10))+
labs(title="Ability to recover true number of groups for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+
geom_hline(yintercept = 8,color = "red")+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= lweight, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,0.3))+
labs(title="Last p_k weight value for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= fit_err, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,max(table_comp$err)))+
labs(title="Fit error value for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),                                                                                                                                                                    strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= err, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,max(table_comp$err)))+
labs(title="RMSE error between estimated and true covariance matrix for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),                                                                                                                                                                    strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= fit_err, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,max(table_comp$fit_err)))+
labs(title="Fit error value for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),                                                                                                                                                                    strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
LtGJ <- load_object("Sim_smallSK4_gjam.Rda")
Ltgj0<- load_object( "Sim_smallSK4_gjam0.Rda")
LtT1<-load_object("Sim_smallSK4_type1.Rda")
LtT2<-load_object("Sim_smallSK4_type2.Rda")
LtT3<-load_object("Sim_smallSK4_type3.Rda")
LtT4<-load_object("Sim_smallSK4_type4.Rda")
table_comp<-as.data.frame(matrix(NA, nrow=length(r_vec)*length(S_vec)*5, ncol=1))
table_comp$S<- rep(S_vec, each=4*5)
table_comp$mod<- rep(c("gjam","gjam1","gjam2","gjam3","gjam4"), 4*4)
table_comp$num<- rep(1:16, each=5)
table_comp$rv<- rep(c(5,10,15,20), each=5, 4)
burn<-2000
it<- 5000
nsamples<-500
for(i in (1: nrow(table_comp))){
j<-table_comp$num[i]
table_comp$Schar[i]<- paste0("S=",table_comp$S[i])
if((table_comp$mod[i]=="gjam")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtGJ)[j]))>0)){ table_comp$res[i]<- mean(LtGJ[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam1")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT1)[j]))>0)){ table_comp$res[i]<-  mean(LtT1[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam2")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT2)[j]))>0)){ table_comp$res[i]<- mean(LtT2[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam3")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT3)[j]))>0)){ table_comp$res[i]<-  mean(LtT3[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam4")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT4)[j]))>0)){ table_comp$res[i]<- mean(LtT4[[j]]$trace[-c(1:burn)])}
if((table_comp$mod[i]=="gjam")&(length(grep(paste0("r_",table_comp$rv[i]),names(Ltgj0)[j]))>0)){
table_comp$lweight[i]<- apply(Ltgj0[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(Ltgj0[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- Ltgj0[[j]]$fit
table_comp$err[i]<- Ltgj0[[j]]$err
}
if((table_comp$mod[i]=="gjam1")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT1)[j]))>0)){
table_comp$lweight[i]<-  apply(LtT1[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT1[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT1[[j]]$fit
table_comp$err[i]<- LtT1[[j]]$err
}
if((table_comp$mod[i]=="gjam2")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT2)[j]))>0)){
table_comp$lweight[i]<- apply(LtT2[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT2[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT2[[j]]$fit
table_comp$err[i]<- LtT2[[j]]$err
}
if((table_comp$mod[i]=="gjam3")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT3)[j]))>0)){
table_comp$lweight[i]<-  apply(LtT3[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT3[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT3[[j]]$fit
table_comp$err[i]<- LtT3[[j]]$err
}
if((table_comp$mod[i]=="gjam4")&(length(grep(paste0("r_",table_comp$rv[i]),names(LtT4)[j]))>0)){
table_comp$lweight[i]<- apply(LtT4[[j]]$pk_chain[-c(1:burn),],2,mean)[length(apply(LtT4[[j]]$pk_chain,2,mean))]
table_comp$fit_err[i]<- LtT4[[j]]$fit
table_comp$err[i]<- LtT4[[j]]$err
}
}
table_comp$Schar <- factor(table_comp$Schar, levels=c('S=20','S=50','S=80','S=100'))
table_comp<-table_comp[,-1]
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= res, colour = mod) + geom_point(size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,10))+
labs(title="Ability to recover true number of groups for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+
geom_hline(yintercept = 8,color = "red")+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= lweight, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,0.3))+
labs(title="Last p_k weight value for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= fit_err, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,max(table_comp$fit_err)))+
labs(title="Fit error value for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),                                                                                                                                                                    strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= err, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,max(table_comp$err)))+
labs(title="RMSE error between estimated and true covariance matrix for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),                                                                                                                                                                    strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
table_comp<-table_comp[,-1]
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= res, colour = mod) + geom_point(size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,10))+
labs(title="Ability to recover true number of groups for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+
geom_hline(yintercept = 8,color = "red")+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= lweight, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,0.3))+
labs(title="Last p_k weight value for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),
strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= fit_err, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,max(table_comp$fit_err)))+
labs(title="Fit error value for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),                                                                                                                                                                    strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
p <- ggplot(data= table_comp)
q<- p +aes(x=rv,y= err, colour = mod) + geom_point( size = 2) +facet_wrap( ~ Schar, strip.position = "bottom", scales = "free_x")+ ylab("Posterior mean") + xlab("S and r values")+ylim(c(0,max(table_comp$err)))+
labs(title="RMSE error between estimated and true covariance matrix for all models", caption=paste0("Number of iterations: ",it," burnin: ",burn," number of samples: ",nsamples))+theme_bw()+theme(panel.spacing = unit(0, "lines"),
strip.background = element_blank(),                                                                                                                                                                    strip.placement = "outside",legend.position = "top", plot.title = element_text(hjust = 0.5))
q
###################Functions for expectation on K_n for  Dirichlet##################
func_meanDP<-function(x,S=50) {sum(x/(x+(1:S)-1))}
func_meanDP(1/20)
func_meanDP(1/20,S=1246)
func_meanDP(1,S=1246)
k_df<- rep(1:50,  by=49/9)
npoint_df <- rep(seq(50,140, by=10), each=50)
df<- as.data.frame(matrix(NA, nrow=500, ncol=1))
df$k<- k_df
df$np<- npoint_df
for(l in (1: nrow(df))){
df$val[l]<- prob_dir_large_dim(df$k[l],npoints=df$np[l],theta=20)
}
df$np<- as.factor(df$np)
p150<- plot_ly(df, x =df$k , y = df$np, z = df$val, split = df$np, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density for Dirichlet prior theta=20, varying n in (50-140) ", scene = list(xaxis= list(title="K"),yaxis= list(title="number of points"), zaxis= list(title="Probability")))
p150
theta_df <- rep(seq(1,150, by=149/9), each=150)
k_df<- rep(1:150, 10)
df<- as.data.frame(matrix(NA, nrow=1500, ncol=1))
df$k<- k_df
df$theta<- theta_df
for(l in (1: nrow(df))){
df$val[l]<- prob_dir_large_dim(df$k[l],npoints=150,theta=df$theta[l])
}
df$theta<- as.factor(df$theta)
p150<- plot_ly(df, x =df$k , y = df$theta, z = df$val, split = df$theta, type = "scatter3d", mode = "lines") %>%
layout(title="Prior density for Dirichlet prior for n=50", scene = list(xaxis= list(title="K"),yaxis= list(title="alpha"), zaxis= list(title="Probability")))
p150
func_meanDP<-function(x,S=50) {sum(x/(x+(1:S)-1))}
alpha_seq<- seq(1,100,length.out = 20)
S_seq<-round(seq(20,150,length.out = 20 ))
exp_m_DP_s<-outer(alpha_seq,S_seq,Vectorize(func_meanDP))
build3d_diff_mod<-function(x,y,z,par1="",lim=max(z)){
z<-pmin(z,1520)
nrz <- nrow(z)
ncz <- ncol(z)
jet.colors <- colorRampPalette( c("blue", "red") )
nbcol <- 100
color <- jet.colors(nbcol)
zfacet <- z[-1, -1] + z[-1, -ncz] + z[-nrz, -1] + z[-nrz, -ncz]
facetcol <- cut(zfacet, nbcol)
sigma_param<-x
theta_param<-y
par(mar = c(2,1,2,.1), mgp = c(1,1,0), xaxs = "i", yaxs = "i", las= 1)
persp(
x = sigma_param,
y = theta_param,
z = z,
zlim = c(min(z),lim),
col = color[facetcol],
theta = -25,
phi = 25,
ltheta = 120,
ticktype = "detailed",
shade = 0.3,
xlab = "", ylab = "", zlab = "",
d = 5, r = 10,
cex.axis = 1, cex.lab = 1.3, nticks = 3, main = par1)
text(.13,-.37,expression(alpha), cex = 1.5)
text(-.3,-.35,expression(n), cex = 1.5)
}
alpha_seq<- seq(1,10,length.out = 20)
sigma_seq<- seq(0.1,0.5,length.out = 20 )
func_meanPY<-function(x,y,K,S) {(x/y)*(prod((x+y+c(1:S) -1)/(x+c(1:S) -1))-1)}
exp_m_PY<-outer(alpha_seq,sigma_seq,Vectorize(func_meanPY),S=50)
exp_m_PY
func_meanDP(1,S=1246)
